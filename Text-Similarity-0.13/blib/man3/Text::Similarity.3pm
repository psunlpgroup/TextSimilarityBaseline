.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Text::Similarity 3"
.TH Text::Similarity 3 "2015-10-08" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Similarity \- Measure the pair\-wise Similarity of Files or Strings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&      # this will return an un\-normalized score that just gives the
\&      # number of overlaps by default (or F1 if normalize is set),
\&      # plus a hash table of other scores, with the following keys
\&      # \*(Aqwc1\*(Aq, \*(Aqwc2\*(Aq, \*(Aqraw\*(Aq, \*(Aqprecision\*(Aq, \*(Aqrecall\*(Aq, \*(AqF\*(Aq, \*(Aqdice\*(Aq, \*(AqE\*(Aq, \*(Aqcosine\*(Aq, \*(Aqraw_lesk\*(Aq,\*(Aqlesk\*(Aq
\&      # wc1 and wc2 are respective word counts; see Overlaps.pm for definitions of other scores
\&
\&      use Text::Similarity::Overlaps;
\&      my $mod = Text::Similarity::Overlaps\->new;
\&      defined $mod or die "Construction of Text::Similarity::Overlaps failed";
\&
\&      # adjust file names to reflect true relative position
\&      # these paths are valid from lib/Text/Similarity
\&      my $text_file1 = \*(AqOverlaps.pm\*(Aq;
\&      my $text_file2 = \*(Aq../OverlapFinder.pm\*(Aq;
\&
\&      my $score = $mod\->getSimilarity ($text_file1, $text_file2);
\&      print "The similarity of $text_file1 and $text_file2 is : $score\en";
\&
\&      my ($score1, %allScores) = $mod\->getSimilarity ($text_file1, $text_file2);
\&      print "The raw similarity of $text_file1 and $text_file2 is : $allScores{\*(Aqraw\*(Aq}\en";
\&      print "The lesk score of $text_file1 and $text_file2 is : $allScores{\*(Aqlesk\*(Aq}\en";
\&
\&
\&      # if you want to turn on the verbose options and provide a stoplist
\&      # you can pass those parameters to Overlaps.pm via hash arguments
\&
\&      # the verbose option causes extra scores to be printed to STDERR
\&
\&      use Text::Similarity::Overlaps;
\&      my %options = (\*(Aqverbose\*(Aq => 1, \*(Aqstoplist\*(Aq => \*(Aq../../samples/stoplist.txt\*(Aq);
\&
\&      my $mod = Text::Similarity::Overlaps\->new (\e%options);
\&      defined $mod or die "Construction of Text::Similarity::Overlaps failed";
\&
\&      # adjust file names to reflect true relative position
\&      # these paths are valid from lib/Text/Similarity
\&      my $text_file1 = \*(AqOverlaps.pm\*(Aq;
\&      my $text_file2 = \*(Aq../OverlapFinder.pm\*(Aq;
\&     
\&      my ($score, %allScores) = $mod\->getSimilarity ($text_file1, $text_file2);
\&      print "The raw similarity of $text_file1 and $text_file2 is : $allScores{\*(Aqraw\*(Aq}\en";
\&      print "The lesk score of $text_file1 and $text_file2 is : $allScores{\*(Aqlesk\*(Aq}\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is a superclass for other modules and provides generic 
services such as stop word removal, compound identification, and text 
cleaning or sanitizing.
.PP
It's important to realize that additional methods of measuring 
similarity can be added to this package. Text::Similarity::Overlaps is 
just one possible way of measuring similarity, others can be added.
.PP
Subroutine sanitizeString carries out text cleaning. Briefly, it removes 
nearly all punctuation except for underscores and embedded apostrophes, 
converts all text to lower case, and collapes multiple white spaces to 
a single space.
.PP
This module is where compounds are identified (although currently 
disabled). When implemented it will check a list of compounds provided 
by the user, and then when a compound is found in the text it will be 
desigated via an underscore (e.g., white house might be converted to 
white_house).
.PP
Stop words are removed here. The length of the documents reported does 
not include the stop words. Overlaps are found after stopword removal. 
By including a word in the stoplist, you are saying that the word never 
existed in your input (in effect).
.SH "BUGS"
.IX Header "BUGS"
.IP "\(bu" 4
Compoundify and stemming currently not supported.
.IP "\(bu" 4
Granularity option in getSimilarity not supported.
.IP "\(bu" 4
Cleaning should probably be optional.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<http://text\-similarity.sourceforge.net>
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 2
\& Ted Pedersen, University of Minnesota, Duluth
\& tpederse at d.umn.edu
\&
\& Siddharth Patwardhan, University of Utah
\& sidd at cs.utah.edu
\&
\& Jason Michelizzi
\&
\& Ying Liu, University of Minnesota, Twin Cities
\& liux0395 at umn.edu
.Ve
.PP
Last modified by :
\&\f(CW$Id:\fR Similarity.pm,v 1.4 2015/10/08 13:22:13 tpederse Exp $
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2004\-2010, Ted Pedersen, Jason Michelizzi, Siddharth 
Patwardhan, and Ying Liu
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE. \s0 See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, \s-1MA  02111\-1307  USA\s0
